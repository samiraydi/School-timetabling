/*
 * Copyright 2016 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.acme.schooltimetabling;
    dialect "java"

import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;
import org.acme.schooltimetabling.domain.Lesson
import java.time.temporal.ChronoUnit;

global HardSoftScoreHolder scoreHolder;


/*rule "Constraint"
	dialect "mvel"
	when
		Lesson( $id : id)
		Lesson( $room : room)
		Lesson( $timeslot : timeslot)
		Lesson( id != $id , room == $room , timeslot == $timeslot )
	then
		scoreHolder.addHardConstraintMatch(kcontext, -1);
end*/











// ############################################################################
// Hard constraints
// ############################################################################


rule "room conflict"
    when
        Lesson($id : id, $timeslot : timeslot, $room : room)
        Lesson(id != $id, timeslot == $timeslot, room == $room)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end


rule "teacher Conflict"
    when
        Lesson($id : id, $timeslot : timeslot, $teacher : teacher)
        Lesson(id != $id, timeslot == $timeslot, teacher == $teacher)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "studentGroup Conflict"
    when
        Lesson($id : id, $timeslot : timeslot, $studentGroup : studentGroup)
        Lesson(id != $id, timeslot == $timeslot, studentGroup == $studentGroup)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end



